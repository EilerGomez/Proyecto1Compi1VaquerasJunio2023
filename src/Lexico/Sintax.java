
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 11 19:34:20 CST 2023
//----------------------------------------------------

package Lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 11 19:34:20 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\003\006\000\002\003\006\000\002\003" +
    "\010\000\002\003\011\000\002\003\007\000\002\003\010" +
    "\000\002\003\007\000\002\003\011\000\002\003\010\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\011\000\002\003\007\000\002\003\010\000\002\003" +
    "\011\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\004\011\000\002\004\007\000" +
    "\002\005\007\000\002\006\012\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\010\000\002\012\012\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\022\004\007\005\005\006\012\007\022\011" +
    "\021\016\016\017\013\042\017\001\002\000\024\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\016\ufff9\017" +
    "\ufff9\042\ufff9\001\002\000\004\042\257\001\002\000\024" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\016" +
    "\uffff\017\uffff\042\uffff\001\002\000\004\042\247\001\002" +
    "\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\016\ufffd\017\ufffd\042\ufffd\001\002\000\024\002\243" +
    "\004\007\005\005\006\012\007\022\011\021\016\016\017" +
    "\013\042\017\001\002\000\004\042\224\001\002\000\004" +
    "\033\213\001\002\000\024\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\016\ufff5\017\ufff5\042\ufff5\001\002" +
    "\000\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\016\ufff7\017\ufff7\042\ufff7\001\002\000\004\033\207" +
    "\001\002\000\004\022\067\001\002\000\024\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\016\ufffb\017\ufffb" +
    "\042\ufffb\001\002\000\004\033\060\001\002\000\004\033" +
    "\023\001\002\000\006\042\027\043\024\001\002\000\034" +
    "\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\032\056\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\004\034\042\001\002\000\014\023\032\035" +
    "\034\036\033\040\030\041\031\001\002\000\032\020\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6\001\002\000\006" +
    "\042\027\043\024\001\002\000\006\042\027\043\024\001" +
    "\002\000\006\042\027\043\024\001\002\000\006\042\027" +
    "\043\024\001\002\000\006\042\027\043\024\001\002\000" +
    "\004\034\uffdb\001\002\000\004\034\uffda\001\002\000\004" +
    "\034\uffdc\001\002\000\004\034\uffd9\001\002\000\004\034" +
    "\uffd8\001\002\000\016\004\007\005\005\006\012\016\016" +
    "\017\013\042\017\001\002\000\022\004\007\005\005\006" +
    "\012\010\052\015\051\016\016\017\013\042\017\001\002" +
    "\000\022\004\uffd1\005\uffd1\006\uffd1\010\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\042\uffd1\001\002\000\022\004\uffd2\005\uffd2" +
    "\006\uffd2\010\uffd2\015\uffd2\016\uffd2\017\uffd2\042\uffd2\001" +
    "\002\000\022\004\uffd0\005\uffd0\006\uffd0\010\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\042\uffd0\001\002\000\022\004\uffce\005" +
    "\uffce\006\uffce\010\uffce\015\uffce\016\uffce\017\uffce\042\uffce" +
    "\001\002\000\022\004\uffcf\005\uffcf\006\uffcf\010\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\042\uffcf\001\002\000\024\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\016\uffd4\017" +
    "\uffd4\042\uffd4\001\002\000\016\004\007\005\005\006\012" +
    "\016\016\017\013\042\017\001\002\000\022\004\uffcd\005" +
    "\uffcd\006\uffcd\010\uffcd\015\uffcd\016\uffcd\017\uffcd\042\uffcd" +
    "\001\002\000\020\004\007\005\005\006\012\015\055\016" +
    "\016\017\013\042\017\001\002\000\024\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016\uffd3\017\uffd3\042" +
    "\uffd3\001\002\000\004\043\057\001\002\000\032\020\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\001\002\000\006" +
    "\042\027\043\024\001\002\000\004\020\062\001\002\000" +
    "\006\042\027\043\024\001\002\000\004\034\064\001\002" +
    "\000\016\004\007\005\005\006\012\016\016\017\013\042" +
    "\017\001\002\000\020\004\007\005\005\006\012\015\066" +
    "\016\016\017\013\042\017\001\002\000\024\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\016\uffdd\017\uffdd" +
    "\042\uffdd\001\002\000\010\037\071\042\073\043\070\001" +
    "\002\000\016\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\203" +
    "\032\204\001\002\000\076\004\135\005\127\006\117\007" +
    "\130\010\124\011\120\012\141\013\122\014\111\015\142" +
    "\016\110\017\131\021\136\022\134\023\116\024\106\025" +
    "\125\026\140\027\123\030\105\031\121\032\133\033\104" +
    "\034\114\035\126\036\132\037\115\042\113\043\107\044" +
    "\112\001\002\000\012\024\100\025\077\026\101\027\075" +
    "\001\002\000\014\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\074\001\002\000\030\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4\017\ufff4\042" +
    "\ufff4\001\002\000\006\042\uffe2\043\uffe2\001\002\000\006" +
    "\042\027\043\024\001\002\000\006\042\uffe3\043\uffe3\001" +
    "\002\000\006\042\uffe4\043\uffe4\001\002\000\006\042\uffe1" +
    "\043\uffe1\001\002\000\004\030\103\001\002\000\030\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\042\uffe6\001\002\000\076\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\001\002\000\076\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\001\002\000\076\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\076\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\001\002\000\076\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\001\002\000\076\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\001\002\000\076\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\001\002\000\076\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\001\002\000\076\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\042\uffb5\043\uffb5\044\uffb5\001" +
    "\002\000\004\030\202\001\002\000\076\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\001\002\000\076\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\042\uffca\043" +
    "\uffca\044\uffca\001\002\000\076\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\001\002\000\076\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\001\002\000\076\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\001\002\000\076\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\042\uffba\043\uffba\044\uffba\001" +
    "\002\000\076\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002" +
    "\000\076\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\042\uffbc\043\uffbc\044\uffbc\001\002\000" +
    "\076\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\042\uffb4\043\uffb4\044\uffb4\001\002\000\076" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002\000\076\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\076\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\001\002\000\076\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\001\002\000\076\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\001\002\000\076\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\001\002\000\076\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\001\002\000\076\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\001\002\000\076\004\175\005\170\006\155\007\167" +
    "\010\162\011\157\012\177\013\161\014\150\015\200\016" +
    "\147\017\166\021\174\022\173\023\156\024\145\025\165" +
    "\026\176\027\163\030\144\031\160\032\171\033\143\034" +
    "\154\035\164\036\172\037\153\042\152\043\146\044\151" +
    "\001\002\000\076\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\042\uffbb\043\uffbb\044\uffbb\001" +
    "\002\000\076\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\001\002" +
    "\000\076\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\042\uffc3\043\uffc3\044\uffc3\001\002\000" +
    "\076\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\042\uff99\043\uff99\044\uff99\001\002\000\076" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\042\uff9c\043\uff9c\044\uff9c\001\002\000\076\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\001\002\000\076\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\042\uff94\043\uff94\044\uff94\001\002\000\076\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\001\002\000\076\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\001\002\000\076\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\042\uff93\043" +
    "\uff93\044\uff93\001\002\000\076\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\042\uff95\043\uff95" +
    "\044\uff95\001\002\000\004\030\201\001\002\000\076\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\042\uff98\043\uff98\044\uff98\001\002\000\076\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\042\uffad\043\uffad\044\uffad\001\002\000\076\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\001\002\000\076\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\001\002\000\076\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\001\002\000\076\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\001\002\000\076\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\042\uffab\043\uffab\044" +
    "\uffab\001\002\000\076\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\001\002\000\076\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\042\uff97\043\uff97\044\uff97\001" +
    "\002\000\076\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\042\uff9f\043\uff9f\044\uff9f\001\002" +
    "\000\076\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\042\uffa4\043\uffa4\044\uffa4\001\002\000" +
    "\076\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\042\uffac\043\uffac\044\uffac\001\002\000\076" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\042\uffae\043\uffae\044\uffae\001\002\000\076\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\001\002\000\076\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\042\uff96\043\uff96\044\uff96\001\002\000\076\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\001\002\000\076\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\001\002\000\076\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\001\002\000\076\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\001\002\000\076\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\001\002\000\076\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\001\002\000\030\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\015\uffef\016\uffef\017\uffef\042\uffef" +
    "\001\002\000\030\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\015\ufff0\016\ufff0\017\ufff0\042\ufff0" +
    "\001\002\000\030\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\015\ufff3\016\ufff3\017\ufff3\042\ufff3" +
    "\001\002\000\004\043\205\001\002\000\014\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\206\001\002\000\030\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\015" +
    "\uffec\016\uffec\017\uffec\042\uffec\001\002\000\004\042\210" +
    "\001\002\000\004\034\211\001\002\000\004\030\212\001" +
    "\002\000\030\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\015\uffde\016\uffde\017\uffde\042\uffde\001" +
    "\002\000\006\037\214\042\215\001\002\000\074\004\135" +
    "\005\127\006\117\007\130\010\124\011\120\012\141\013" +
    "\122\014\111\015\142\016\110\017\131\021\136\022\134" +
    "\023\116\024\106\025\125\026\140\027\123\030\105\031" +
    "\121\032\133\033\104\034\114\035\126\036\132\042\113" +
    "\043\107\044\112\001\002\000\004\034\216\001\002\000" +
    "\004\030\217\001\002\000\030\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\042\uffdf\001\002\000\076\004\175\005\170\006\155" +
    "\007\167\010\162\011\157\012\177\013\161\014\150\015" +
    "\200\016\147\017\166\021\174\022\173\023\156\024\145" +
    "\025\165\026\176\027\163\030\144\031\160\032\171\033" +
    "\143\034\154\035\164\036\172\037\221\042\152\043\146" +
    "\044\151\001\002\000\004\034\222\001\002\000\004\030" +
    "\223\001\002\000\030\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\015\uffe0\016\uffe0\017\uffe0\042" +
    "\uffe0\001\002\000\006\022\225\030\226\001\002\000\006" +
    "\042\027\043\227\001\002\000\030\002\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\042\uffe9\001\002\000\016\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\234\032\235\001\002\000\012\024\100" +
    "\025\077\026\101\027\075\001\002\000\006\042\027\043" +
    "\024\001\002\000\004\030\233\001\002\000\030\002\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\042\uffe5\001\002\000\030\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\015" +
    "\uffee\016\uffee\017\uffee\042\uffee\001\002\000\004\043\236" +
    "\001\002\000\014\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\237\001\002\000\030\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\015\uffed\016\uffed\017\uffed\042" +
    "\uffed\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\016\ufffa\017\ufffa\042\ufffa\001\002\000" +
    "\024\002\000\004\000\005\000\006\000\007\000\011\000" +
    "\016\000\017\000\042\000\001\002\000\024\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\016\ufffe\017\ufffe" +
    "\042\ufffe\001\002\000\004\002\001\001\002\000\024\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\016\ufff6" +
    "\017\ufff6\042\ufff6\001\002\000\024\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\016\ufff8\017\ufff8\042\ufff8" +
    "\001\002\000\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\016\ufffc\017\ufffc\042\ufffc\001\002\000\006" +
    "\022\250\030\251\001\002\000\006\042\027\043\024\001" +
    "\002\000\030\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\015\uffeb\016\uffeb\017\uffeb\042\uffeb\001" +
    "\002\000\014\024\100\025\077\026\101\027\075\030\254" +
    "\001\002\000\006\042\027\043\024\001\002\000\030\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\042\uffe7\001\002\000\004\030" +
    "\256\001\002\000\030\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\015\uffe8\016\uffe8\017\uffe8\042" +
    "\uffe8\001\002\000\006\022\260\030\261\001\002\000\004" +
    "\037\262\001\002\000\030\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\015\uffea\016\uffea\017\uffea" +
    "\042\uffea\001\002\000\076\004\135\005\127\006\117\007" +
    "\130\010\124\011\120\012\141\013\122\014\111\015\142" +
    "\016\110\017\131\021\136\022\134\023\116\024\106\025" +
    "\125\026\140\027\123\030\105\031\121\032\133\033\104" +
    "\034\114\035\126\036\132\037\263\042\113\043\107\044" +
    "\112\001\002\000\004\030\267\001\002\000\076\004\175" +
    "\005\170\006\155\007\167\010\162\011\157\012\177\013" +
    "\161\014\150\015\200\016\147\017\166\021\174\022\173" +
    "\023\156\024\145\025\165\026\176\027\163\030\144\031" +
    "\160\032\171\033\143\034\154\035\164\036\172\037\265" +
    "\042\152\043\146\044\151\001\002\000\004\030\266\001" +
    "\002\000\030\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\015\ufff1\016\ufff1\017\ufff1\042\ufff1\001" +
    "\002\000\030\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\015\ufff2\016\ufff2\017\ufff2\042\ufff2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\020\002\010\003\005\004\007\005\017\006" +
    "\003\011\014\012\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\240\004\241\005\245\006\237\011\244" +
    "\012\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\024\010\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\040\001\001\000\004\010\037\001\001\000\004" +
    "\010\036\001\001\000\004\010\035\001\001\000\004\010" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\043\004\044\005\045\013\042\001\001\000\010\003\046" +
    "\004\047\005\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\043\004\044\005\045\013" +
    "\053\001\001\000\002\001\001\000\010\003\046\004\047" +
    "\005\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\060\001\001\000\002\001\001" +
    "\000\004\010\062\001\001\000\002\001\001\000\012\003" +
    "\043\004\044\005\045\013\064\001\001\000\010\003\046" +
    "\004\047\005\052\001\001\000\002\001\001\000\004\010" +
    "\071\001\001\000\002\001\001\000\004\014\136\001\001" +
    "\000\004\015\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\230\001\001" +
    "\000\004\010\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\251\001\001\000\002\001\001\000\004\015\252\001\001" +
    "\000\004\010\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOQUE_SEA ::= LOQUE_SEA ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOQUE_SEA ::= LOQUE_SEA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOQUE_SEA ::= LOQUE_SEA Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOQUE_SEA ::= LOQUE_SEA MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOQUE_SEA ::= LOQUE_SEA MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOQUE_SEA ::= LOQUE_SEA C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOQUE_SEA ::= LOQUE_SEA A_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOQUE_SEA ::= LOQUE_SEA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOQUE_SEA ::= LOQUE_SEA Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOQUE_SEA ::= LOQUE_SEA Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOQUE_SEA ::= LOQUE_SEA Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOQUE_SEA ::= LOQUE_SEA Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOQUE_SEA ::= LOQUE_SEA Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOQUE_SEA ::= LOQUE_SEA Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOQUE_SEA ::= LOQUE_SEA Comparacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOQUE_SEA ::= LOQUE_SEA Asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOQUE_SEA ::= LOQUE_SEA Espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOQUE_SEA ::= LOQUE_SEA ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOQUE_SEA ::= LOQUE_SEA LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOQUE_SEA ::= LOQUE_SEA FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LOQUE_SEA ::= LOQUE_SEA ENTONCES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LOQUE_SEA ::= LOQUE_SEA DONDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LOQUE_SEA ::= LOQUE_SEA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LOQUE_SEA ::= LOQUE_SEA PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LOQUE_SEA ::= LOQUE_SEA SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LOQUE_SEA ::= LOQUE_SEA SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LOQUE_SEA ::= LOQUE_SEA FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LOQUE_SEA ::= LOQUE_SEA TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LOQUE_SEA ::= LOQUE_SEA ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LOQUE_SEA ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOQUE_SEA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOQUE_SEA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOQUE_SEA ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOQUE_SEA ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LOQUE_SEA ::= C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LOQUE_SEA ::= A_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOQUE_SEA ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LOQUE_SEA ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LOQUE_SEA ::= Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOQUE_SEA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOQUE_SEA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOQUE_SEA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOQUE_SEA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOQUE_SEA ::= Comparacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOQUE_SEA ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOQUE_SEA ::= Espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOQUE_SEA ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOQUE_SEA ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOQUE_SEA ::= FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOQUE_SEA ::= ENTONCES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOQUE_SEA ::= DONDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOQUE_SEA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOQUE_SEA ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOQUE_SEA ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOQUE_SEA ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOQUE_SEA ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOQUE_SEA ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LOQUE_SEA ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS_IF_ELSE ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS_IF_ELSE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS_IF_ELSE ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE ::= SI A_Parentesis SENTENCIA_FOR C_Parentesis SENTENCIAS_IF_ELSE SINO SENTENCIAS_IF_ELSE FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= SI A_Parentesis SENTENCIA_FOR C_Parentesis SENTENCIAS_IF_ELSE FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALORES ::= Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALORES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= VALORES Menor VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= VALORES Mayor VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= VALORES MayorIgual VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_FOR ::= VALORES MenorIgual VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_FOR ::= VALORES Comparacion VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FOR ::= PARA A_Parentesis VALORES A VALORES C_Parentesis SENTENCIAS_IF_ELSE FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LECTURA ::= LEER A_Parentesis Identificador C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESCRITURA ::= ESCRIBIR A_Parentesis Identificador C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESCRITURA ::= ESCRIBIR A_Parentesis Comillas LOQUE_SEA Comillas C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADORES ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADORES ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORES ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADORES ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= FLOTANTE Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= ENTERO Identificador Asignacion VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= ENTERO Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= FLOTANTE Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TEXTO Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= ENTERO Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Asignacion Numero Punto Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= FLOTANTE Identificador Asignacion Numero Punto Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= FLOTANTE Identificador Asignacion Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Identificador Asignacion Comillas LOQUE_SEA Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador Asignacion Comillas Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= TEXTO Identificador Asignacion Comillas LOQUE_SEA Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TEXTO Identificador Asignacion Comillas Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Identificador Asignacion Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Identificador Asignacion Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= INICIO IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= INICIO IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INICIO LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

