
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 25 22:24:11 CST 2023
//----------------------------------------------------

package Lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 25 22:24:11 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\003\006\000\002\003\006\000\002" +
    "\003\010\000\002\003\011\000\002\003\007\000\002\003" +
    "\010\000\002\003\007\000\002\003\011\000\002\003\010" +
    "\000\002\003\006\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\011\000\002\003\007\000\002" +
    "\003\010\000\002\003\011\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\004\011" +
    "\000\002\004\007\000\002\005\007\000\002\006\013\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\011\000\002\012\015\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\016\011\000\002\017\014\000\002" +
    "\020\011\000\002\020\007\000\002\020\010\000\002\020" +
    "\006\000\002\021\011\000\002\021\012\000\002\022\006" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\006\000\002\024\007\000\002" +
    "\025\005\000\002\025\003\000\002\026\015\000\002\026" +
    "\016\000\002\027\005\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\032\004\027\005\025\006\017\007\024\011" +
    "\021\012\031\016\010\017\022\020\023\022\007\030\032" +
    "\053\015\001\002\000\034\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\030\uffee\053\uffee\001\002\000\034\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\030\ufff0\053\ufff0\001\002\000" +
    "\034\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\012\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\030\ufff3\053" +
    "\ufff3\001\002\000\004\044\u0125\001\002\000\004\044\u0121" +
    "\001\002\000\034\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\011\uffff\012\uffff\016\uffff\017\uffff\020\uffff\022\uffff" +
    "\030\uffff\053\uffff\001\002\000\034\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\022\ufffb\030\ufffb\053\ufffb\001\002\000\034\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec" +
    "\016\uffec\017\uffec\020\uffec\022\uffec\030\uffec\053\uffec\001" +
    "\002\000\034\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1\030" +
    "\ufff1\053\ufff1\001\002\000\006\033\u0107\044\u0108\001\002" +
    "\000\034\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\012\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\030\ufff7" +
    "\053\ufff7\001\002\000\004\053\373\001\002\000\034\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\022\ufff5\030\ufff5\053\ufff5\001" +
    "\002\000\004\044\363\001\002\000\004\053\350\001\002" +
    "\000\004\044\337\001\002\000\004\044\325\001\002\000" +
    "\004\053\314\001\002\000\034\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\011\ufffd\012\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\030\ufffd\053\ufffd\001\002\000\004\053\300" +
    "\001\002\000\034\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9" +
    "\030\ufff9\053\ufff9\001\002\000\004\044\121\001\002\000" +
    "\010\004\053\005\050\006\052\001\002\000\034\002\045" +
    "\004\027\005\025\006\017\007\024\011\021\012\031\016" +
    "\010\017\022\020\023\022\007\030\032\053\015\001\002" +
    "\000\034\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\011" +
    "\uffed\012\uffed\016\uffed\017\uffed\020\uffed\022\uffed\030\uffed" +
    "\053\uffed\001\002\000\034\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\012\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\030\uffef\053\uffef\001\002\000\034\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\022\ufff4\030\ufff4\053\ufff4\001\002\000" +
    "\034\002\000\004\000\005\000\006\000\007\000\011\000" +
    "\012\000\016\000\017\000\020\000\022\000\030\000\053" +
    "\000\001\002\000\034\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\011\ufffc\012\ufffc\016\ufffc\017\ufffc\020\ufffc\022" +
    "\ufffc\030\ufffc\053\ufffc\001\002\000\034\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\022\uffeb\030\uffeb\053\uffeb\001\002\000\034" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\030\ufff2\053\ufff2" +
    "\001\002\000\034\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\030\ufff8\053\ufff8\001\002\000\034\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\030\ufff6\053\ufff6\001\002\000\004\002" +
    "\001\001\002\000\034\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\011\ufffe\012\ufffe\016\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\030\ufffe\053\ufffe\001\002\000\034\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\022\ufffa\030\ufffa\053\ufffa\001\002\000\004" +
    "\053\uff5c\001\002\000\004\053\054\001\002\000\004\053" +
    "\uff5d\001\002\000\004\053\uff5e\001\002\000\004\044\055" +
    "\001\002\000\012\004\053\005\050\006\052\045\056\001" +
    "\002\000\004\026\113\001\002\000\004\053\110\001\002" +
    "\000\004\045\061\001\002\000\004\026\062\001\002\000" +
    "\024\004\027\005\025\006\017\007\024\011\021\016\010" +
    "\020\023\022\007\053\015\001\002\000\026\004\027\005" +
    "\025\006\017\007\024\011\021\016\010\020\023\022\007" +
    "\031\077\053\015\001\002\000\034\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\011\uffbe\016\uffbe\020\uffbe\022\uffbe\023\uffbe" +
    "\025\uffbe\027\uffbe\031\uffbe\053\uffbe\001\002\000\034\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\016\uffc4\020\uffc4" +
    "\022\uffc4\023\uffc4\025\uffc4\027\uffc4\031\uffc4\053\uffc4\001" +
    "\002\000\034\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3" +
    "\016\uffc3\020\uffc3\022\uffc3\023\uffc3\025\uffc3\027\uffc3\031" +
    "\uffc3\053\uffc3\001\002\000\034\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\016\uffc1\020\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\027\uffc1\031\uffc1\053\uffc1\001\002\000\034\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\011\uffc0\016\uffc0\020\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\027\uffc0\031\uffc0\053\uffc0\001\002" +
    "\000\034\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\016" +
    "\uffbf\020\uffbf\022\uffbf\023\uffbf\025\uffbf\027\uffbf\031\uffbf" +
    "\053\uffbf\001\002\000\034\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\016\uffc5\020\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\027\uffc5\031\uffc5\053\uffc5\001\002\000\034\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\011\uffc2\016\uffc2\020\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\027\uffc2\031\uffc2\053\uffc2\001\002\000" +
    "\034\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\016\uffb6" +
    "\020\uffb6\022\uffb6\023\uffb6\025\uffb6\027\uffb6\031\uffb6\053" +
    "\uffb6\001\002\000\034\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\016\uffbc\020\uffbc\022\uffbc\023\uffbc\025\uffbc\027" +
    "\uffbc\031\uffbc\053\uffbc\001\002\000\034\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\011\uffbb\016\uffbb\020\uffbb\022\uffbb\023" +
    "\uffbb\025\uffbb\027\uffbb\031\uffbb\053\uffbb\001\002\000\004" +
    "\053\105\001\002\000\034\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\016\uffb9\020\uffb9\022\uffb9\023\uffb9\025\uffb9" +
    "\027\uffb9\031\uffb9\053\uffb9\001\002\000\034\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\011\uffb8\016\uffb8\020\uffb8\022\uffb8" +
    "\023\uffb8\025\uffb8\027\uffb8\031\uffb8\053\uffb8\001\002\000" +
    "\034\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\016\uffb7" +
    "\020\uffb7\022\uffb7\023\uffb7\025\uffb7\027\uffb7\031\uffb7\053" +
    "\uffb7\001\002\000\034\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\016\uffbd\020\uffbd\022\uffbd\023\uffbd\025\uffbd\027" +
    "\uffbd\031\uffbd\053\uffbd\001\002\000\034\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\011\uffba\016\uffba\020\uffba\022\uffba\023" +
    "\uffba\025\uffba\027\uffba\031\uffba\053\uffba\001\002\000\004" +
    "\041\106\001\002\000\004\027\107\001\002\000\034\002" +
    "\uff56\004\uff56\005\uff56\006\uff56\007\uff56\011\uff56\012\uff56" +
    "\016\uff56\017\uff56\020\uff56\022\uff56\030\uff56\053\uff56\001" +
    "\002\000\006\041\111\045\uff5f\001\002\000\010\004\053" +
    "\005\050\006\052\001\002\000\004\045\uff60\001\002\000" +
    "\024\004\027\005\025\006\017\007\024\011\021\016\010" +
    "\020\023\022\007\053\015\001\002\000\026\004\027\005" +
    "\025\006\017\007\024\011\021\016\010\020\023\022\007" +
    "\031\115\053\015\001\002\000\004\053\116\001\002\000" +
    "\004\041\117\001\002\000\004\027\120\001\002\000\034" +
    "\002\uff57\004\uff57\005\uff57\006\uff57\007\uff57\011\uff57\012" +
    "\uff57\016\uff57\017\uff57\020\uff57\022\uff57\030\uff57\053\uff57" +
    "\001\002\000\010\050\124\053\127\054\123\001\002\000" +
    "\004\045\274\001\002\000\034\021\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\272\045\uffcc\046" +
    "\uffcc\047\uffcc\051\uffcc\052\uffcc\001\002\000\120\004\155" +
    "\005\212\006\217\007\156\010\167\011\210\012\170\013" +
    "\207\014\162\015\163\016\204\017\161\020\172\021\165" +
    "\022\151\023\152\024\176\025\216\026\220\027\154\030" +
    "\160\031\175\032\202\033\164\034\157\035\215\036\205" +
    "\037\211\040\174\041\203\042\153\043\171\044\166\045" +
    "\173\046\200\047\206\053\201\054\214\055\177\001\002" +
    "\000\014\034\141\046\143\047\142\051\137\052\140\001" +
    "\002\000\032\021\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\001\002\000\034\021\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\044\130\045\uffcb\046\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\001\002\000\012\045\132\050\124" +
    "\053\127\054\123\001\002\000\006\041\135\045\uff58\001" +
    "\002\000\032\021\uff55\034\uff55\035\uff55\036\uff55\037\uff55" +
    "\040\uff55\041\uff55\045\uff55\046\uff55\047\uff55\051\uff55\052" +
    "\uff55\001\002\000\004\045\134\001\002\000\032\021\uff54" +
    "\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54\045" +
    "\uff54\046\uff54\047\uff54\051\uff54\052\uff54\001\002\000\010" +
    "\050\124\053\127\054\123\001\002\000\004\045\uff59\001" +
    "\002\000\010\050\124\053\127\054\123\001\002\000\010" +
    "\050\124\053\127\054\123\001\002\000\010\050\124\053" +
    "\127\054\123\001\002\000\010\050\124\053\127\054\123" +
    "\001\002\000\010\050\124\053\127\054\123\001\002\000" +
    "\004\045\uffd0\001\002\000\004\045\uffcf\001\002\000\004" +
    "\045\uffd1\001\002\000\004\045\uffce\001\002\000\004\045" +
    "\uffcd\001\002\000\122\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\053\uff95\054\uff95\055\uff95\001\002\000\122\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\053\uff96\054\uff96\055\uff96" +
    "\001\002\000\122\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\001\002\000\122\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\053\uff92\054\uff92\055\uff92\001" +
    "\002\000\122\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\001\002\000\122\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\053\uffb2\054\uffb2\055\uffb2\001\002" +
    "\000\122\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\001\002\000\122\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\053\uff90\054\uff90\055\uff90\001\002\000" +
    "\122\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\053\uff91\054" +
    "\uff91\055\uff91\001\002\000\122\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\053\uffad\054\uffad\055\uffad\001\002\000\122" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\053\uffac\054\uffac" +
    "\055\uffac\001\002\000\122\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\053\uffa8\054\uffa8\055\uffa8\001\002\000\122\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\053\uff98\054\uff98\055" +
    "\uff98\001\002\000\122\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\001\002\000\122\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\001\002\000\122\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\001\002\000\122\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\053\uffa0\054\uffa0\055\uffa0\001" +
    "\002\000\122\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\001\002\000\122\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002" +
    "\000\122\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\001\002\000\120\004\155\005\212\006" +
    "\217\007\156\010\167\011\210\012\170\013\207\014\162" +
    "\015\163\016\204\017\161\020\172\021\165\022\151\023" +
    "\152\024\176\025\216\026\220\027\154\030\160\031\175" +
    "\032\202\033\164\034\157\035\215\036\205\037\211\040" +
    "\174\041\203\042\153\043\171\044\166\045\173\046\200" +
    "\047\206\053\201\054\214\055\177\001\002\000\122\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\053\uff97\054\uff97\055" +
    "\uff97\001\002\000\122\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\053\uff99\054\uff99\055\uff99\001\002\000\122\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\001\002\000\122\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\001\002\000\122\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\053\uffa9\054\uffa9\055\uffa9\001" +
    "\002\000\122\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\001\002\000\122\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\053\uffab\054\uffab\055\uffab\001\002" +
    "\000\122\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\001\002\000\122\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\053\uff9c\054\uff9c\055\uff9c\001\002\000" +
    "\122\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\053\uffae\054" +
    "\uffae\055\uffae\001\002\000\122\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000\122" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\001\002\000\122\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\053\uffb4\054\uffb4\055\uffb4\001\002\000\120\005" +
    "\261\006\265\007\225\010\236\011\257\012\237\013\256" +
    "\014\231\015\232\016\254\017\230\020\241\021\234\022" +
    "\221\023\222\024\245\025\264\026\266\027\224\030\227" +
    "\031\244\032\251\033\233\034\226\035\263\036\253\037" +
    "\260\040\243\041\252\042\223\043\240\044\235\045\242" +
    "\046\247\047\255\050\267\053\250\054\262\055\246\001" +
    "\002\000\122\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\001\002\000\122\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\053\uffa6\054\uffa6\055\uffa6\001\002" +
    "\000\122\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\053\uff94" +
    "\054\uff94\055\uff94\001\002\000\122\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002\000" +
    "\122\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\053\uff93\054" +
    "\uff93\055\uff93\001\002\000\122\004\uff6f\005\uff6f\006\uff6f" +
    "\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015" +
    "\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f" +
    "\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\050\uff6f\053\uff6f\054\uff6f\055\uff6f\001\002\000\122" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012" +
    "\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70" +
    "\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044" +
    "\uff70\045\uff70\046\uff70\047\uff70\050\uff70\053\uff70\054\uff70" +
    "\055\uff70\001\002\000\122\004\uff7b\005\uff7b\006\uff7b\007" +
    "\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b" +
    "\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\053\uff7b\054\uff7b\055\uff7b\001\002\000\122\004" +
    "\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\053\uff6c\054\uff6c\055" +
    "\uff6c\001\002\000\122\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\001\002\000\122\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\053\uff81\054\uff81\055\uff81" +
    "\001\002\000\122\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a" +
    "\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\053\uff6a\054\uff6a\055\uff6a\001\002\000\122\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\053\uff6b\054\uff6b\055\uff6b\001" +
    "\002\000\122\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\053" +
    "\uff87\054\uff87\055\uff87\001\002\000\122\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046" +
    "\uff86\047\uff86\050\uff86\053\uff86\054\uff86\055\uff86\001\002" +
    "\000\122\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\053\uff82" +
    "\054\uff82\055\uff82\001\002\000\122\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023" +
    "\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\047\uff72\050\uff72\053\uff72\054\uff72\055\uff72\001\002\000" +
    "\122\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020" +
    "\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\053\uff79\054" +
    "\uff79\055\uff79\001\002\000\122\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\053\uff8b\054\uff8b\055\uff8b\001\002\000\122" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\053\uff89\054\uff89" +
    "\055\uff89\001\002\000\122\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\053\uff7a\054\uff7a\055\uff7a\001\002\000\122\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\046\uff84\047\uff84\050\uff84\053\uff84\054\uff84\055" +
    "\uff84\001\002\000\122\004\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78" +
    "\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050" +
    "\uff78\053\uff78\054\uff78\055\uff78\001\002\000\122\004\uff7d" +
    "\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\053\uff7d\054\uff7d\055\uff7d" +
    "\001\002\000\122\004\uff69\005\uff69\006\uff69\007\uff69\010" +
    "\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025" +
    "\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69" +
    "\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\053\uff69\054\uff69\055\uff69\001\002\000\122\004\uff71\005" +
    "\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022" +
    "\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71" +
    "\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\050\uff71\053\uff71\054\uff71\055\uff71\001" +
    "\002\000\122\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73" +
    "\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017" +
    "\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\053" +
    "\uff73\054\uff73\055\uff73\001\002\000\122\004\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\053\uff77\054\uff77\055\uff77\001\002" +
    "\000\122\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\053\uff75" +
    "\054\uff75\055\uff75\001\002\000\122\004\uff83\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\053\uff83\054\uff83\055\uff83\001\002\000" +
    "\122\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\053\uff7c\054" +
    "\uff7c\055\uff7c\001\002\000\122\004\uff7f\005\uff7f\006\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\053\uff7f\054\uff7f\055\uff7f\001\002\000\122" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\045\uff85\046\uff85\047\uff85\050\uff85\053\uff85\054\uff85" +
    "\055\uff85\001\002\000\122\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\053\uff76\054\uff76\055\uff76\001\002\000\122\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\053\uff88\054\uff88\055" +
    "\uff88\001\002\000\122\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\053\uff8a\054\uff8a\055\uff8a\001\002\000\122\004\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\001\002\000\122\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\001\002\000\122\004\uff74\005" +
    "\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74" +
    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037" +
    "\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\047\uff74\050\uff74\053\uff74\054\uff74\055\uff74\001" +
    "\002\000\122\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80" +
    "\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\053" +
    "\uff80\054\uff80\055\uff80\001\002\000\122\004\uff6e\005\uff6e" +
    "\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e" +
    "\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046" +
    "\uff6e\047\uff6e\050\uff6e\053\uff6e\054\uff6e\055\uff6e\001\002" +
    "\000\122\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\001\002\000\122\004\uff6d\005\uff6d\006" +
    "\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d" +
    "\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023" +
    "\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\053\uff6d\054\uff6d\055\uff6d\001\002\000" +
    "\032\021\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\001" +
    "\002\000\120\004\271\005\261\006\265\007\225\010\236" +
    "\011\257\012\237\013\256\014\231\015\232\016\254\017" +
    "\230\020\241\021\234\022\221\023\222\024\245\025\264" +
    "\026\266\027\224\030\227\031\244\032\251\033\233\034" +
    "\226\035\263\036\253\037\260\040\243\041\252\042\223" +
    "\043\240\044\235\045\242\046\247\047\255\053\250\054" +
    "\262\055\246\001\002\000\122\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\053\uff8f\054\uff8f\055\uff8f\001\002\000\004" +
    "\054\273\001\002\000\032\021\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca\047\uffca" +
    "\051\uffca\052\uffca\001\002\000\004\026\275\001\002\000" +
    "\024\004\027\005\025\006\017\007\024\011\021\016\010" +
    "\020\023\022\007\053\015\001\002\000\026\004\027\005" +
    "\025\006\017\007\024\011\021\016\010\020\023\022\007" +
    "\027\277\053\015\001\002\000\034\002\uff68\004\uff68\005" +
    "\uff68\006\uff68\007\uff68\011\uff68\012\uff68\016\uff68\017\uff68" +
    "\020\uff68\022\uff68\030\uff68\053\uff68\001\002\000\006\033" +
    "\301\041\302\001\002\000\010\050\124\053\127\054\123" +
    "\001\002\000\044\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\011\uffe0\012\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\053\uffe0\001" +
    "\002\000\014\035\310\036\306\037\311\040\304\041\307" +
    "\001\002\000\010\050\uffd7\053\uffd7\054\uffd7\001\002\000" +
    "\010\050\124\053\127\054\123\001\002\000\010\050\uffd8" +
    "\053\uffd8\054\uffd8\001\002\000\044\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\022\uffdc\023\uffdc\025\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\053\uffdc\001\002\000\010\050\uffd9\053\uffd9\054\uffd9" +
    "\001\002\000\010\050\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\004\041\313\001\002\000\044\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\012\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\022\uffdd\023\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\053\uffdd\001\002\000\006\033\315\041\316\001\002\000" +
    "\004\050\317\001\002\000\044\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\023\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\053\uffdf\001\002\000\122\004\155\005\212\006\217\007" +
    "\156\010\167\011\210\012\170\013\207\014\162\015\163" +
    "\016\204\017\161\020\172\021\165\022\151\023\152\024" +
    "\176\025\216\026\220\027\154\030\160\031\175\032\202" +
    "\033\164\034\157\035\215\036\205\037\211\040\174\041" +
    "\203\042\153\043\171\044\166\045\173\046\200\047\206" +
    "\050\321\053\201\054\214\055\177\001\002\000\120\005" +
    "\261\006\265\007\225\010\236\011\257\012\237\013\256" +
    "\014\231\015\232\016\254\017\230\020\241\021\234\022" +
    "\221\023\222\024\245\025\264\026\266\027\224\030\227" +
    "\031\244\032\251\033\233\034\226\035\263\036\253\037" +
    "\260\040\243\041\252\042\223\043\240\044\235\045\242" +
    "\046\247\047\255\050\323\053\250\054\262\055\246\001" +
    "\002\000\004\041\322\001\002\000\044\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\025\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\053\uffe8\001\002\000\004\041\324\001\002\000" +
    "\044\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\025" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\053\uffe7\001\002\000\010" +
    "\050\124\053\127\054\123\001\002\000\004\045\327\001" +
    "\002\000\004\026\330\001\002\000\024\004\027\005\025" +
    "\006\017\007\024\011\021\016\010\020\023\022\007\053" +
    "\015\001\002\000\026\004\027\005\025\006\017\007\024" +
    "\011\021\016\010\020\023\022\007\027\332\053\015\001" +
    "\002\000\046\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\333\011\uffc7\012\uffc7\016\uffc7\017\uffc7\020\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\053\uffc7" +
    "\001\002\000\004\026\334\001\002\000\024\004\027\005" +
    "\025\006\017\007\024\011\021\016\010\020\023\022\007" +
    "\053\015\001\002\000\026\004\027\005\025\006\017\007" +
    "\024\011\021\016\010\020\023\022\007\027\336\053\015" +
    "\001\002\000\044\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\053\uffc6\001" +
    "\002\000\006\050\340\053\341\001\002\000\120\004\155" +
    "\005\212\006\217\007\156\010\167\011\210\012\170\013" +
    "\207\014\162\015\163\016\204\017\161\020\172\021\165" +
    "\022\151\023\152\024\176\025\216\026\220\027\154\030" +
    "\160\031\175\032\202\033\164\034\157\035\215\036\205" +
    "\037\211\040\174\041\203\042\153\043\171\044\166\045" +
    "\173\046\200\047\206\053\201\054\214\055\177\001\002" +
    "\000\004\045\342\001\002\000\004\041\343\001\002\000" +
    "\044\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\053\uffd4\001\002\000\120" +
    "\005\261\006\265\007\225\010\236\011\257\012\237\013" +
    "\256\014\231\015\232\016\254\017\230\020\241\021\234" +
    "\022\221\023\222\024\245\025\264\026\266\027\224\030" +
    "\227\031\244\032\251\033\233\034\226\035\263\036\253" +
    "\037\260\040\243\041\252\042\223\043\240\044\235\045" +
    "\242\046\247\047\255\050\345\053\250\054\262\055\246" +
    "\001\002\000\004\045\346\001\002\000\004\041\347\001" +
    "\002\000\044\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\053\uffd5\001\002" +
    "\000\004\044\351\001\002\000\012\004\053\005\050\006" +
    "\052\045\352\001\002\000\004\026\360\001\002\000\004" +
    "\045\354\001\002\000\004\026\355\001\002\000\024\004" +
    "\027\005\025\006\017\007\024\011\021\016\010\020\023" +
    "\022\007\053\015\001\002\000\026\004\027\005\025\006" +
    "\017\007\024\011\021\016\010\020\023\022\007\027\357" +
    "\053\015\001\002\000\034\002\uff61\004\uff61\005\uff61\006" +
    "\uff61\007\uff61\011\uff61\012\uff61\016\uff61\017\uff61\020\uff61" +
    "\022\uff61\030\uff61\053\uff61\001\002\000\024\004\027\005" +
    "\025\006\017\007\024\011\021\016\010\020\023\022\007" +
    "\053\015\001\002\000\026\004\027\005\025\006\017\007" +
    "\024\011\021\016\010\020\023\022\007\027\362\053\015" +
    "\001\002\000\034\002\uff62\004\uff62\005\uff62\006\uff62\007" +
    "\uff62\011\uff62\012\uff62\016\uff62\017\uff62\020\uff62\022\uff62" +
    "\030\uff62\053\uff62\001\002\000\010\050\124\053\127\054" +
    "\123\001\002\000\004\021\365\001\002\000\010\050\124" +
    "\053\127\054\123\001\002\000\004\045\367\001\002\000" +
    "\004\026\370\001\002\000\024\004\027\005\025\006\017" +
    "\007\024\011\021\016\010\020\023\022\007\053\015\001" +
    "\002\000\026\004\027\005\025\006\017\007\024\011\021" +
    "\016\010\020\023\022\007\027\372\053\015\001\002\000" +
    "\044\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\025" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\053\uffd2\001\002\000\006" +
    "\033\374\041\375\001\002\000\010\050\124\053\127\054" +
    "\376\001\002\000\044\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\012\uffde\016\uffde\017\uffde\020\uffde\022" +
    "\uffde\023\uffde\025\uffde\027\uffde\030\uffde\031\uffde\053\uffde" +
    "\001\002\000\016\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\u0104\043\u0103\001\002\000\012\035\310\036\306\037\311" +
    "\040\304\001\002\000\010\050\124\053\127\054\123\001" +
    "\002\000\004\041\u0102\001\002\000\044\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\016\uffda\017" +
    "\uffda\020\uffda\022\uffda\023\uffda\025\uffda\027\uffda\030\uffda" +
    "\031\uffda\053\uffda\001\002\000\004\054\u0105\001\002\000" +
    "\044\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\012\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\025" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\053\uffe4\001\002\000\014" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\u0106\001\002\000" +
    "\044\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\053\uffe3\001\002\000\010" +
    "\050\u010f\053\u0112\054\u010e\001\002\000\012\045\u0109\050" +
    "\124\053\127\054\123\001\002\000\004\041\u010d\001\002" +
    "\000\004\045\u010b\001\002\000\004\041\u010c\001\002\000" +
    "\044\002\uff5a\004\uff5a\005\uff5a\006\uff5a\007\uff5a\011\uff5a" +
    "\012\uff5a\016\uff5a\017\uff5a\020\uff5a\022\uff5a\023\uff5a\025" +
    "\uff5a\027\uff5a\030\uff5a\031\uff5a\053\uff5a\001\002\000\044" +
    "\002\uff5b\004\uff5b\005\uff5b\006\uff5b\007\uff5b\011\uff5b\012" +
    "\uff5b\016\uff5b\017\uff5b\020\uff5b\022\uff5b\023\uff5b\025\uff5b" +
    "\027\uff5b\030\uff5b\031\uff5b\053\uff5b\001\002\000\016\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\u011d\043\u011e\001\002" +
    "\000\122\004\155\005\212\006\217\007\156\010\167\011" +
    "\210\012\170\013\207\014\162\015\163\016\204\017\161" +
    "\020\172\021\165\022\151\023\152\024\176\025\216\026" +
    "\220\027\154\030\160\031\175\032\202\033\164\034\157" +
    "\035\215\036\205\037\211\040\174\041\203\042\153\043" +
    "\171\044\166\045\173\046\200\047\206\050\u0119\053\201" +
    "\054\214\055\177\001\002\000\012\035\310\036\306\037" +
    "\311\040\304\001\002\000\014\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\u0114\001\002\000\016\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\u0113\044\130\001\002\000\044\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\012\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\uffea\025\uffea\027\uffea" +
    "\030\uffea\031\uffea\053\uffea\001\002\000\044\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\023\uffe1\025\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\053\uffe1\001\002\000\010\050\124\053\127" +
    "\054\123\001\002\000\004\041\u0117\001\002\000\044\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\025\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\053\uffdb\001\002\000\120\005\261" +
    "\006\265\007\225\010\236\011\257\012\237\013\256\014" +
    "\231\015\232\016\254\017\230\020\241\021\234\022\221" +
    "\023\222\024\245\025\264\026\266\027\224\030\227\031" +
    "\244\032\251\033\233\034\226\035\263\036\253\037\260" +
    "\040\243\041\252\042\223\043\240\044\235\045\242\046" +
    "\247\047\255\050\u011b\053\250\054\262\055\246\001\002" +
    "\000\004\041\u011a\001\002\000\044\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\025\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\053\uffe6\001\002\000\014\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\u011c\001\002\000\044\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\022\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\053\uffe5\001\002\000\044\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\022\uffe9\023\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\053\uffe9\001\002\000\004\054\u011f\001\002\000\014\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\u0120\001\002\000\044" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\025\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\053\uffe2\001\002\000\004\053" +
    "\u0122\001\002\000\004\045\u0123\001\002\000\004\041\u0124" +
    "\001\002\000\044\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\012\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\023\uffd3\025\uffd3\027\uffd3\030\uffd3\031\uffd3\053\uffd3\001" +
    "\002\000\004\053\u0126\001\002\000\004\045\u0127\001\002" +
    "\000\004\026\u0128\001\002\000\004\023\u012a\001\002\000" +
    "\006\023\u0134\025\u0133\001\002\000\006\050\u012c\054\u012b" +
    "\001\002\000\004\024\u0131\001\002\000\120\004\155\005" +
    "\212\006\217\007\156\010\167\011\210\012\170\013\207" +
    "\014\162\015\163\016\204\017\161\020\172\021\165\022" +
    "\151\023\152\024\176\025\216\026\220\027\154\030\160" +
    "\031\175\032\202\033\164\034\157\035\215\036\205\037" +
    "\211\040\174\041\203\042\153\043\171\044\166\045\173" +
    "\046\200\047\206\053\201\054\214\055\177\001\002\000" +
    "\120\005\261\006\265\007\225\010\236\011\257\012\237" +
    "\013\256\014\231\015\232\016\254\017\230\020\241\021" +
    "\234\022\221\023\222\024\245\025\264\026\266\027\224" +
    "\030\227\031\244\032\251\033\233\034\226\035\263\036" +
    "\253\037\260\040\243\041\252\042\223\043\240\044\235" +
    "\045\242\046\247\047\255\050\u012e\053\250\054\262\055" +
    "\246\001\002\000\004\024\u012f\001\002\000\024\004\027" +
    "\005\025\006\017\007\024\011\021\016\010\020\023\022" +
    "\007\053\015\001\002\000\030\004\027\005\025\006\017" +
    "\007\024\011\021\016\010\020\023\022\007\023\uff64\025" +
    "\uff64\053\015\001\002\000\024\004\027\005\025\006\017" +
    "\007\024\011\021\016\010\020\023\022\007\053\015\001" +
    "\002\000\030\004\027\005\025\006\017\007\024\011\021" +
    "\016\010\020\023\022\007\023\uff63\025\uff63\053\015\001" +
    "\002\000\004\024\u013d\001\002\000\006\050\u0136\054\u0135" +
    "\001\002\000\004\024\u013b\001\002\000\120\004\155\005" +
    "\212\006\217\007\156\010\167\011\210\012\170\013\207" +
    "\014\162\015\163\016\204\017\161\020\172\021\165\022" +
    "\151\023\152\024\176\025\216\026\220\027\154\030\160" +
    "\031\175\032\202\033\164\034\157\035\215\036\205\037" +
    "\211\040\174\041\203\042\153\043\171\044\166\045\173" +
    "\046\200\047\206\053\201\054\214\055\177\001\002\000" +
    "\120\005\261\006\265\007\225\010\236\011\257\012\237" +
    "\013\256\014\231\015\232\016\254\017\230\020\241\021" +
    "\234\022\221\023\222\024\245\025\264\026\266\027\224" +
    "\030\227\031\244\032\251\033\233\034\226\035\263\036" +
    "\253\037\260\040\243\041\252\042\223\043\240\044\235" +
    "\045\242\046\247\047\255\050\u0138\053\250\054\262\055" +
    "\246\001\002\000\004\024\u0139\001\002\000\024\004\027" +
    "\005\025\006\017\007\024\011\021\016\010\020\023\022" +
    "\007\053\015\001\002\000\030\004\027\005\025\006\017" +
    "\007\024\011\021\016\010\020\023\022\007\023\uff66\025" +
    "\uff66\053\015\001\002\000\024\004\027\005\025\006\017" +
    "\007\024\011\021\016\010\020\023\022\007\053\015\001" +
    "\002\000\030\004\027\005\025\006\017\007\024\011\021" +
    "\016\010\020\023\022\007\023\uff65\025\uff65\053\015\001" +
    "\002\000\024\004\027\005\025\006\017\007\024\011\021" +
    "\016\010\020\023\022\007\053\015\001\002\000\026\004" +
    "\027\005\025\006\017\007\024\011\021\016\010\020\023" +
    "\022\007\027\u013f\053\015\001\002\000\044\002\uff67\004" +
    "\uff67\005\uff67\006\uff67\007\uff67\011\uff67\012\uff67\016\uff67" +
    "\017\uff67\020\uff67\022\uff67\023\uff67\025\uff67\027\uff67\030" +
    "\uff67\031\uff67\053\uff67\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\032\002\032\003\010\004\025\005\011\006" +
    "\027\011\015\012\017\016\005\017\013\021\004\024\003" +
    "\026\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\050\001\001\000\030\003\036\004\045" +
    "\005\037\006\046\011\042\012\043\016\035\017\041\021" +
    "\034\024\033\026\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\057\023\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\064\004" +
    "\071\005\065\006\072\011\067\012\070\013\062\017\066" +
    "\024\063\001\001\000\022\003\074\004\102\005\075\006" +
    "\103\011\100\012\101\017\077\024\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\111\023\056\001\001\000" +
    "\002\001\001\000\024\003\064\004\071\005\065\006\072" +
    "\011\067\012\070\013\113\017\066\024\063\001\001\000" +
    "\022\003\074\004\102\005\075\006\103\011\100\012\101" +
    "\017\077\024\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\121" +
    "\010\124\027\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\130\025\132\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\130\025\135\027" +
    "\125\001\001\000\002\001\001\000\006\010\147\027\125" +
    "\001\001\000\006\010\146\027\125\001\001\000\006\010" +
    "\145\027\125\001\001\000\006\010\144\027\125\001\001" +
    "\000\006\010\143\027\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\064\004\071\005\065\006\072\011" +
    "\067\012\070\013\275\017\066\024\063\001\001\000\022" +
    "\003\074\004\102\005\075\006\103\011\100\012\101\017" +
    "\077\024\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\302\027\125\001\001\000\002\001\001\000" +
    "\004\015\304\001\001\000\002\001\001\000\006\010\311" +
    "\027\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\325\010\124\027\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\064\004\071\005" +
    "\065\006\072\011\067\012\070\013\330\017\066\024\063" +
    "\001\001\000\022\003\074\004\102\005\075\006\103\011" +
    "\100\012\101\017\077\024\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\064\004\071\005\065\006" +
    "\072\011\067\012\070\013\334\017\066\024\063\001\001" +
    "\000\022\003\074\004\102\005\075\006\103\011\100\012" +
    "\101\017\077\024\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\352\023\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\064\004" +
    "\071\005\065\006\072\011\067\012\070\013\355\017\066" +
    "\024\063\001\001\000\022\003\074\004\102\005\075\006" +
    "\103\011\100\012\101\017\077\024\073\001\001\000\002" +
    "\001\001\000\024\003\064\004\071\005\065\006\072\011" +
    "\067\012\070\013\360\017\066\024\063\001\001\000\022" +
    "\003\074\004\102\005\075\006\103\011\100\012\101\017" +
    "\077\024\073\001\001\000\002\001\001\000\006\010\363" +
    "\027\125\001\001\000\002\001\001\000\006\010\365\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\064\004\071\005\065\006\072\011\067\012\070\013" +
    "\370\017\066\024\063\001\001\000\022\003\074\004\102" +
    "\005\075\006\103\011\100\012\101\017\077\024\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\376" +
    "\027\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\377\001\001\000\006\010\u0100\027\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u010f\027\u0110\001\001\000\010\010\130\025\u0109\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0117\001\001\000\004\015\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0115\027\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\064\004\071\005\065\006\072\011\067\012\070\013" +
    "\u012f\017\066\024\063\001\001\000\022\003\074\004\102" +
    "\005\075\006\103\011\100\012\101\017\077\024\073\001" +
    "\001\000\024\003\064\004\071\005\065\006\072\011\067" +
    "\012\070\013\u0131\017\066\024\063\001\001\000\022\003" +
    "\074\004\102\005\075\006\103\011\100\012\101\017\077" +
    "\024\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0136\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\064\004\071\005\065\006" +
    "\072\011\067\012\070\013\u0139\017\066\024\063\001\001" +
    "\000\022\003\074\004\102\005\075\006\103\011\100\012" +
    "\101\017\077\024\073\001\001\000\024\003\064\004\071" +
    "\005\065\006\072\011\067\012\070\013\u013b\017\066\024" +
    "\063\001\001\000\022\003\074\004\102\005\075\006\103" +
    "\011\100\012\101\017\077\024\073\001\001\000\024\003" +
    "\064\004\071\005\065\006\072\011\067\012\070\013\u013d" +
    "\017\066\024\063\001\001\000\022\003\074\004\102\005" +
    "\075\006\103\011\100\012\101\017\077\024\073\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LLAMADAFUNCION ::= Identificador A_Parentesis PARAMETROS C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LLAMADAFUNCION ::= Identificador A_Parentesis C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FUNCTION ::= FUNCION TIPOS Identificador A_Parentesis ATRIBUTOS C_Parentesis A_Llaves SENTENCIAS_IF_ELSE RETORNO Identificador Cierre C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // FUNCTION ::= FUNCION TIPOS Identificador A_Parentesis C_Parentesis A_Llaves SENTENCIAS_IF_ELSE RETORNO Identificador Cierre C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PARAMETROS ::= VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PARAMETROS ::= VALORES Cierre PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LLAMADAMETODO ::= Identificador A_Parentesis PARAMETROS C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LLAMADAMETODO ::= Identificador A_Parentesis C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPOS ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPOS ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPOS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ATRIBUTOS ::= TIPOS Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ATRIBUTOS ::= TIPOS Identificador Cierre ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // METODOS ::= METODO Identificador A_Parentesis ATRIBUTOS C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // METODOS ::= METODO Identificador A_Parentesis C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASES ::= CASO Numero DosPuntos SENTENCIAS_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASES ::= CASO Comillas LOQUE_SEA Comillas DosPuntos SENTENCIAS_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASES ::= CASES CASO Numero DosPuntos SENTENCIAS_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASES ::= CASES CASO Comillas LOQUE_SEA Comillas DosPuntos SENTENCIAS_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCH ::= INTERRUPTOR A_Parentesis Identificador C_Parentesis A_Llaves CASES DEFECTO DosPuntos SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // WHILE ::= MIENTRAS A_Parentesis SENTENCIA_FOR C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LOQUE_SEA ::= LOQUE_SEA RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LOQUE_SEA ::= LOQUE_SEA FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LOQUE_SEA ::= LOQUE_SEA METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LOQUE_SEA ::= LOQUE_SEA C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LOQUE_SEA ::= LOQUE_SEA A_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LOQUE_SEA ::= LOQUE_SEA DEFECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LOQUE_SEA ::= LOQUE_SEA INTERRUPTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LOQUE_SEA ::= LOQUE_SEA CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LOQUE_SEA ::= LOQUE_SEA DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LOQUE_SEA ::= LOQUE_SEA A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LOQUE_SEA ::= LOQUE_SEA ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LOQUE_SEA ::= LOQUE_SEA Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LOQUE_SEA ::= LOQUE_SEA Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LOQUE_SEA ::= LOQUE_SEA MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LOQUE_SEA ::= LOQUE_SEA MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LOQUE_SEA ::= LOQUE_SEA C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LOQUE_SEA ::= LOQUE_SEA A_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LOQUE_SEA ::= LOQUE_SEA Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LOQUE_SEA ::= LOQUE_SEA Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LOQUE_SEA ::= LOQUE_SEA Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LOQUE_SEA ::= LOQUE_SEA Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LOQUE_SEA ::= LOQUE_SEA Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LOQUE_SEA ::= LOQUE_SEA Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LOQUE_SEA ::= LOQUE_SEA Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LOQUE_SEA ::= LOQUE_SEA Comparacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LOQUE_SEA ::= LOQUE_SEA Asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LOQUE_SEA ::= LOQUE_SEA Espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LOQUE_SEA ::= LOQUE_SEA ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LOQUE_SEA ::= LOQUE_SEA LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LOQUE_SEA ::= LOQUE_SEA FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LOQUE_SEA ::= LOQUE_SEA ENTONCES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LOQUE_SEA ::= LOQUE_SEA DONDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LOQUE_SEA ::= LOQUE_SEA MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LOQUE_SEA ::= LOQUE_SEA PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LOQUE_SEA ::= LOQUE_SEA SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LOQUE_SEA ::= LOQUE_SEA SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LOQUE_SEA ::= LOQUE_SEA FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LOQUE_SEA ::= LOQUE_SEA TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LOQUE_SEA ::= RETORNO LOQUE_SEA ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LOQUE_SEA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LOQUE_SEA ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOQUE_SEA ::= C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOQUE_SEA ::= A_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOQUE_SEA ::= DEFECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOQUE_SEA ::= INTERRUPTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOQUE_SEA ::= CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOQUE_SEA ::= DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOQUE_SEA ::= A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOQUE_SEA ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOQUE_SEA ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOQUE_SEA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOQUE_SEA ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOQUE_SEA ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOQUE_SEA ::= C_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOQUE_SEA ::= A_Parentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOQUE_SEA ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOQUE_SEA ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOQUE_SEA ::= Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOQUE_SEA ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOQUE_SEA ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOQUE_SEA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOQUE_SEA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LOQUE_SEA ::= Comparacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LOQUE_SEA ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LOQUE_SEA ::= Espacio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LOQUE_SEA ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LOQUE_SEA ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LOQUE_SEA ::= FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LOQUE_SEA ::= ENTONCES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LOQUE_SEA ::= DONDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LOQUE_SEA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LOQUE_SEA ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOQUE_SEA ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOQUE_SEA ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOQUE_SEA ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOQUE_SEA ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LOQUE_SEA ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOQUE_SEA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE LLAMADAMETODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS_IF_ELSE ::= SENTENCIAS_IF_ELSE ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS_IF_ELSE ::= LLAMADAMETODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS_IF_ELSE ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS_IF_ELSE ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS_IF_ELSE ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS_IF_ELSE ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS_IF_ELSE ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS_IF_ELSE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS_IF_ELSE ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF_ELSE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_ELSE ::= SI A_Parentesis SENTENCIA_FOR C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves SINO A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= SI A_Parentesis SENTENCIA_FOR C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORES ::= LLAMADAFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALORES ::= Comillas LOQUE_SEA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORES ::= Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALORES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= VALORES Menor VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= VALORES Mayor VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= VALORES MayorIgual VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= VALORES MenorIgual VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= VALORES Comparacion VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= PARA A_Parentesis VALORES A VALORES C_Parentesis A_Llaves SENTENCIAS_IF_ELSE C_Llaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LECTURA ::= LEER A_Parentesis Identificador C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESCRITURA ::= ESCRIBIR A_Parentesis Identificador C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESCRITURA ::= ESCRIBIR A_Parentesis Comillas LOQUE_SEA Comillas C_Parentesis Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADORES ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADORES ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADORES ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADORES ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= FLOTANTE Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= ENTERO Identificador Asignacion VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= ENTERO Identificador Asignacion VALORES OPERADORES VALORES Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= FLOTANTE Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= TEXTO Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= ENTERO Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Identificador Asignacion LLAMADAFUNCION Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Asignacion Numero Punto Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= FLOTANTE Identificador Asignacion Numero Punto Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= FLOTANTE Identificador Asignacion Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Identificador Asignacion Comillas LOQUE_SEA Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Identificador Asignacion Comillas Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TEXTO Identificador Asignacion Comillas LOQUE_SEA Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= TEXTO Identificador Asignacion Comillas Comillas Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Identificador Asignacion Numero Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Asignacion Identificador Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= INICIO FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= INICIO LLAMADAMETODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= LLAMADAMETODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= INICIO METODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= METODOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= INICIO SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= INICIO WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= INICIO IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= INICIO IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INICIO LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

