/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Lexico;

import java.io.File;
import Lexico.Lexer;
import Utilidades.Automatas;
import Variables.Variables;
import java.awt.Color;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;

/**
 *
 * @author HP
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    Automatas automata;
    ArrayList<Variables> variables;
    ArrayList<String> errores;
    int estadoActual = 0;
    String nombre = "";
    String tipo = "";
    String valor = "";
    String valor2 = "";
    String operador = "";
    String nombreVariablePendiente = "";
    String Escritura = "";
    String compilacion = "";
    String comparacion = "";
    int forVar1 = 0;
    int forVar2 = 0;
    String ValorVariableLeer = "null";
    ArrayList<String> variablesLeer;
    
    String var1ForWhile="";
    String var2ForWhile="";
    String textoForWhile="";
    
    //PARA EL SWITCH
    Variables variableSwitch=new Variables();
    String textoComparando="";
    String textoForSwitch="";
    

    public App() {
        initComponents();
        variables = new ArrayList<>();
        errores = new ArrayList<>();
        variablesLeer = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorCode = new javax.swing.JTextArea();
        limpiarConsole = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        valorVariable = new javax.swing.JTextField();
        continuarButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        limpiarCode = new javax.swing.JButton();
        runCode = new javax.swing.JButton();
        analizarLexico = new javax.swing.JButton();
        analizarSintactico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(53, 161, 228));

        editorCode.setBackground(new java.awt.Color(204, 204, 204));
        editorCode.setColumns(45);
        editorCode.setRows(15);
        editorCode.setTabSize(20);
        editorCode.setToolTipText("");
        jScrollPane1.setViewportView(editorCode);

        limpiarConsole.setBackground(new java.awt.Color(0, 204, 255));
        limpiarConsole.setText("Clear Console");
        limpiarConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarConsoleActionPerformed(evt);
            }
        });

        console.setEditable(false);
        console.setBackground(new java.awt.Color(0, 0, 0));
        console.setColumns(20);
        console.setForeground(new java.awt.Color(255, 255, 255));
        console.setRows(5);
        console.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane3.setViewportView(console);

        valorVariable.setEditable(false);
        valorVariable.setDragEnabled(true);
        valorVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorVariableActionPerformed(evt);
            }
        });

        continuarButton.setBackground(new java.awt.Color(255, 255, 204));
        continuarButton.setText("Continuar");
        continuarButton.setEnabled(false);
        continuarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(limpiarConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138)
                        .addComponent(valorVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(continuarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarConsole)
                    .addComponent(valorVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(continuarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1359, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        limpiarCode.setBackground(new java.awt.Color(255, 51, 51));
        limpiarCode.setForeground(new java.awt.Color(255, 255, 255));
        limpiarCode.setText("Clear");
        limpiarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarCodeActionPerformed(evt);
            }
        });

        runCode.setBackground(new java.awt.Color(0, 255, 51));
        runCode.setText("Run");
        runCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCodeActionPerformed(evt);
            }
        });

        analizarLexico.setText("Lexico");
        analizarLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarLexicoActionPerformed(evt);
            }
        });

        analizarSintactico.setText("Sintactico");
        analizarSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarSintacticoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(limpiarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(analizarSintactico, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(analizarLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(runCode, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runCode)
                    .addComponent(limpiarCode)
                    .addComponent(analizarLexico)
                    .addComponent(analizarSintactico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarCodeActionPerformed
        // TODO add your handling code here:
        editorCode.setText("");
    }//GEN-LAST:event_limpiarCodeActionPerformed

    private void runCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCodeActionPerformed
        // TODO add your handling code here:
        //analizarLexico();
        console.setText("");
        compilacion="";
        //ejecutor();
        variablesLeer = new ArrayList<>();
        variables = new ArrayList<>();
        run();
        imprimirVariables();
        imprimirErrores();
        
        ValorVariableLeer="null";
        
        errores = new ArrayList<>();
    }//GEN-LAST:event_runCodeActionPerformed

    private void limpiarConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarConsoleActionPerformed
        console.setText("");
    }//GEN-LAST:event_limpiarConsoleActionPerformed

    private void analizarLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarLexicoActionPerformed
        // TODO add your handling code here:
        analizarLexico();
    }//GEN-LAST:event_analizarLexicoActionPerformed

    private void analizarSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarSintacticoActionPerformed
        AnalizadorSintactico();
    }//GEN-LAST:event_analizarSintacticoActionPerformed

    private void valorVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorVariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorVariableActionPerformed

    private void continuarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuarButtonActionPerformed
        // TODO add your handling code here:
        if (!valorVariable.getText().equalsIgnoreCase("")) {
            System.out.println("Entrando aca en guardando el valor de las variables");
            ValorVariableLeer = valorVariable.getText();

            if (variablesLeer.size() == 1) {
                System.out.println("ingresando a var leer 1");
                guardarValorVariableLeer(variablesLeer.get(0), ValorVariableLeer);
                //ValorVariableLeer="null";
                valorVariable.setEditable(false);
                continuarButton.setEnabled(false);
                
                //variablesLeer = new ArrayList();
                
            } else {
                String[] parts = ValorVariableLeer.split(",");
                
                if (parts.length != variablesLeer.size()) {
                    errores.add("Ingresa el numero correcto de variables a las que tu debes darles valor");
                    System.out.println(variablesLeer.size());
                    System.out.println(parts.length);
                    System.out.println("heyyyyyyyyy");
                } else {
                    for (int i = 0; i < parts.length; i++) {

                        guardarValorVariableLeer(variablesLeer.get(i), parts[i]);
                    }
                    //ValorVariableLeer="null";
                    valorVariable.setEditable(false);
                    continuarButton.setEnabled(false);
                    //variablesLeer = new ArrayList();
                }
            }
            
            
        } else {
            console.setText(console.getText() + "Ingrese valores por favor\n");
        }
        ejecutor();
        
    }//GEN-LAST:event_continuarButtonActionPerformed

    private void guardarValorVariableLeer(String variable, String valor) {
        
        String tipovar = "";
        for (Variables var : variables) {
            if (var.getNombre().equalsIgnoreCase(variable)) {
                tipovar = var.getTipo();
            }
        }

        for (Variables var : variables) {
            if (var.getNombre().equals(variable)) {
                switch (tipovar) {
                    case "ENTERO":
                            try {
                        var.setValor("" + Integer.parseInt(valor));
                                System.out.println("Cambiando valor de la variable");
                                System.out.println(var.getNombre());
                                System.out.println(var.getValor());
                    } catch (NumberFormatException e) {
                        errores.add("La variable con nombre: " + variable + ", es de tipo ENTERO, no compatible con el valor que estas ingresamdo: " + valor);
                    }
                    break;
                    case "FLOTANTE":
                            try {
                        var.setValor("" + Float.valueOf(valor));
                    } catch (NumberFormatException e) {
                        errores.add("La variable con nombre: " + variable + ", es de tipo FLOTANTE, no compatible con el valor que estas ingresamdo: " + valor);
                    }
                    break;
                    case "TEXTO":
                        var.setValor((valor));

                        break;
                    default: 
                        System.out.println("error de tipo");
                        break;
                }
            }
        }
        System.out.println(tipovar);
        System.out.println(variable);
        System.out.println(valor);

    }

    private void analizarLexico() {
        errores = new ArrayList<>();
        int linea = 1;
        int columna = 0;
        String expresion = editorCode.getText();
        Lexer lexer = new Lexer(new StringReader(expresion));
        String resultado = "";

        while (true) {
            try {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "Fin";
                    if (errores.size() == 0) {
                        console.setForeground(Color.white);
                        console.setText(resultado);
                    } else {
                        console.setText("");
                        for (String error : errores) {
                            console.setForeground(Color.red);
                            console.setText(console.getText() + error + "\n");
                        }
                    }

                    return;
                }
                columna += lexer.lexeme.length();
                switch (tokens) {
                    case ERROR:
                        resultado += "El sombolo no existe, en la columna: " + columna + " linea: " + linea + "\n";
                        errores.add("Error lexico: El sombolo: " + lexer.lexeme + " no existe, en la columna: " + columna + " linea: " + linea);
                        break;
                    case Identificador:
                        resultado += lexer.lexeme + "            Es un " + tokens + ", en la columna: " + columna + " linea: " + linea + "\n";
                        break;
                    case Linea:
                        linea++;
                        columna = 0;
                        break;
                    default:
                        resultado += lexer.lexeme + "            Es un: " + tokens + ", en la columna: " + columna + " linea: " + linea + "\n";

                }

            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ejecutor() {
        System.out.println("Ingresando al analizador semantico");
        automata = new Automatas();
       
        
        estadoActual = 0;
        int linea = 1;
        int columna = 0;
        String expresion = editorCode.getText();
        Lexer lexer = new Lexer(new StringReader(expresion));
        compilacion = "";
        Escritura = "";
        while (true) {
            try {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    if (errores.size() == 0) {

                        console.setForeground(Color.white);
                        console.setText(compilacion);
                        System.out.println(compilacion);
                    } else {
                        console.setText("");

                        for (String error : errores) {
                            console.setForeground(Color.red);
                            console.setText(console.getText() + error + "\n");
                        }

                    }

                    return;
                }
                columna += lexer.lexeme.length();
                switch (tokens) {
                    case Linea:
                        linea++;
                        columna = 0;
                        break;
                    default:
                        //resultado+= lexer.lexeme + "            Es un: " + tokens + ", en la columna: " + columna + " linea: " + linea + "\n"; 
                        evaluarAsignaciones(tokens, lexer, linea, columna);
                        //evaluarEscritura(tokens,lexer,linea,columna);
                        System.out.println(estadoActual);

                }

            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void evaluarAsignaciones(Tokens tokens, Lexer lexer, int linea, int columna) {
        if (estadoActual != 10 && estadoActual != 27 && estadoActual != 37 && estadoActual != 50 && estadoActual != 94 && estadoActual != 100
                && estadoActual != 107 && estadoActual != 112 && estadoActual!=125 && estadoActual!=143 && estadoActual!=150 && estadoActual!=152
                && estadoActual!=153&&estadoActual!=154) {
            if (automata.valorToken(tokens) != 11) {
                evaluarEstados(automata.verificarSiguienteEstado(estadoActual, tokens), tokens, lexer, linea, columna);
            }
        } else if (estadoActual == 37 || estadoActual == 50 || estadoActual == 94) {//aqui es para escribir lo que sea
            System.out.println("voy en el estado 37 o 50 o 94");
            if (automata.valorToken(tokens) != 21) {
                Escritura += lexer.lexeme;
                System.out.println(Escritura);
            } else {
                if (estadoActual == 50) {
                    Escritura += "\n";
                }
                estadoActual = automata.verificarSiguienteEstado(estadoActual, tokens);
            }
        } else if (estadoActual == 100 || estadoActual == 107 || estadoActual == 112) {
            if (automata.valorToken(tokens) == 10) {
                evaluarEstados(automata.verificarSiguienteEstado(estadoActual, tokens), tokens, lexer, linea, columna);
            }
        }else if(estadoActual==125){
            
            if(funcionDelWhile(linea, columna)){
                funcionOperacionesDelWhile(tokens, lexer, linea, columna);
            }else{
                if(textoForWhile.equalsIgnoreCase("")){
                     estadoActual=143;
                }else{
                    estadoActual=0;
                }
               
            }
        }else if(estadoActual==143){
            if (automata.valorToken(tokens) == 10) {
                estadoActual=0;
            }
        }else if(estadoActual==150){
            if(automata.valorToken(tokens)!=21){
                textoComparando+=lexer.lexeme;
            }else{
               evaluarEstados(automata.verificarSiguienteEstado(estadoActual, tokens), tokens, lexer, linea, columna);
            }
        }else if(estadoActual==152){
             System.out.println("comparando " +textoComparando + " con: " + variableSwitch.getValor());
            if(textoComparando.equals(variableSwitch.getValor())){               
                estadoActual=153;
            }else{
                estadoActual=157;
            }
            textoComparando="";
        }else if(estadoActual==153){
            funcionOperacionesDelSwitch(tokens, lexer, linea, columna);
        }else if(estadoActual==154){
            if(automata.valorToken(tokens)==10){
                estadoActual=0;
            }
        }
        else {
            if (automata.valorToken(tokens) != 21) {
                valor += lexer.lexeme;
            } else {
                estadoActual = automata.verificarSiguienteEstado(estadoActual, tokens);
            }

        }
    }
    
    private void funcionOperacionesDelSwitch(Tokens token, Lexer lexer, int linea, int columna){
        if(automata.valorToken(token)!=38&&automata.valorToken(token)!=10&&automata.valorToken(token)!=39){
            textoForSwitch+=lexer.lexeme;
            System.out.println(textoForSwitch);
        }else{
            System.out.println("Ya encontro la palabra " + lexer.lexeme);
            Lexer lexerSwitch = new Lexer(new StringReader(textoForSwitch));
            estadoActual=0;
            while(true){
                try {
                    Tokens tokenSwitch=lexerSwitch.yylex();
                    if(tokenSwitch==null){
                        if (errores.size() == 0) {
                            console.setForeground(Color.white);
                            console.setText(console.getText()+compilacion);
                            //textoForWhile="";
                            textoForSwitch="";
                            textoComparando="";
                            System.out.println(compilacion);
                            estadoActual=153;
                            estadoActual=automata.verificarSiguienteEstado(estadoActual, token);
                        } else {
                            console.setText("");
                            for (String error : errores) {
                                console.setForeground(Color.red);
                                console.setText(console.getText() + error + "\n");
                            }
                        }
                        
                        return;
                    }
                    columna += lexerSwitch.lexeme.length();
                    switch (tokenSwitch) {
                        case Linea:
                            linea++;
                            columna = 0;
                            break;
                        default:
                            //resultado+= lexer.lexeme + "            Es un: " + tokens + ", en la columna: " + columna + " linea: " + linea + "\n"; 
                            evaluarAsignaciones(tokenSwitch, lexerSwitch, linea, columna);
                            //evaluarEscritura(tokens,lexer,linea,columna);
                            System.out.println(estadoActual);

                    }
                } catch (IOException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
           } 
            
        }
    }
    public void funcionOperacionesDelWhile(Tokens token, Lexer lexer, int linea, int columna){
        if(automata.valorToken(token)!=10){
            textoForWhile+=lexer.lexeme;
            System.out.println(textoForWhile);
        }else{
            System.out.println("Ya encontro la palabra fin");
            Lexer lexerWhile = new Lexer(new StringReader(textoForWhile));
            estadoActual=0;
           while(true){
                try {
                    Tokens tokenWhile=lexerWhile.yylex();
                    if(tokenWhile==null){
                        if (errores.size() == 0) {
                            console.setForeground(Color.white);
                            console.setText(console.getText()+compilacion);
                            //textoForWhile="";
                            System.out.println(compilacion);
                        } else {
                            console.setText("");
                            for (String error : errores) {
                                console.setForeground(Color.red);
                                console.setText(console.getText() + error + "\n");
                            }

                        }
                        if(funcionDelWhile(linea, columna)){
                            funcionOperacionesDelWhile(token,lexer, linea, columna);
                        }else{
                            textoForWhile="";
                        }
                        return;
                    }
                    columna += lexerWhile.lexeme.length();
                switch (tokenWhile) {
                    case Linea:
                        linea++;
                        columna = 0;
                        break;
                    default:
                        //resultado+= lexer.lexeme + "            Es un: " + tokens + ", en la columna: " + columna + " linea: " + linea + "\n"; 
                        evaluarAsignaciones(tokenWhile, lexerWhile, linea, columna);
                        //evaluarEscritura(tokens,lexer,linea,columna);
                        System.out.println(estadoActual);

                }
                } catch (IOException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
           }           
        }
        estadoActual=125;
    }
    
    private boolean funcionDelWhile( int linea, int columna){
        int var1While=0;
        int var2While=0;
        try {
            var1While=  Integer.parseInt(var1ForWhile);
        } catch (NumberFormatException e) {
            boolean exist=false;
            for (Variables variable : variables) {
                if(variable.getNombre().equals(var1ForWhile)){
                    exist=true;
                    if(variable.getTipo().equals("ENTERO")){
                        var1While=Integer.parseInt(variable.getValor());
                    }else{
                        errores.add("La variable: "+var1ForWhile +" No es de tipo ENTERO, Linea: " + linea + ", Columna: " + columna );
                    }
                }
            }
            if(exist==false){errores.add("La variable: "+var1ForWhile +" No existe, Linea: " + linea + ", Columna: " + columna );estadoActual=0;}
        }
        try {
            var2While=  Integer.parseInt(var2ForWhile);
        } catch (NumberFormatException e) {
            boolean exist=false;
            for (Variables variable : variables) {
                //System.out.println("Buscando el valor de la variable: " +var2ForWhile );
                if(variable.getNombre().equals(var2ForWhile)){
                    exist=true;
                    if(variable.getTipo().equals("ENTERO")){
                        var2While=Integer.parseInt(variable.getValor());
                    }else{
                        errores.add("La variable: "+var2ForWhile +" No es de tipo ENTERO, Linea: " + linea + ", Columna: " + columna );
                    }
                }
            }
            if(exist==false){errores.add("La variable: "+var2ForWhile +" No existe, Linea: " + linea + ", Columna: " + columna );estadoActual=0;}
        }
        
        return comparar(comparacion,var1While,var2While);
        
    }

    private void evaluarEscritura(Tokens tokens, Lexer lexer, int linea, int columna) {
        if (estadoActual != 37) {
            if (automata.valorToken(tokens) != 11) {//ignorando los espacios
                escribir(automata.verificarSiguienteEstado(estadoActual, tokens), tokens, lexer, linea, columna);
            }
        } else {
            if (automata.valorToken(tokens) != 21) {
                Escritura += lexer.lexeme;
            } else {
                estadoActual = automata.verificarSiguienteEstado(estadoActual, tokens);
            }
        }
    }

    private void escribir(int estado, Tokens token, Lexer lexer, int linea, int columna) {
        if (estado == 41) {
            compilacion += Escritura + "\n";
            Escritura = "";
            estadoActual = 0;
        } else if (estado == 40) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    Escritura += var.getValor();
                    exist = true;
                }
            }
            if (exist == false) {
                errores.add("Error semantico: La variable: " + lexer.lexeme + ", no existe, Linea: " + linea + ", Columna: " + columna);
            }
            estadoActual = estado;
        }
    }

    private void evaluarEstados(int estado, Tokens token, Lexer lexer, int linea, int columna) {
        //System.out.println(estado);
        if (estado == 1 || estado == 2 || estado == 3) {
            tipo = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 4 || estado == 8 || estado == 13) {
            nombre = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 6 || estado == 24) {
            valor = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 7 || estado == 12 || estado == 18) {
            Variables var = new Variables();
            var.setNombre(nombre);
            var.setTipo(tipo);
            var.setValor(valor);
            //System.out.println(nombre + ", " + tipo + ", " + valor);
            boolean exist=false;
            for (Variables variable : variables) {
                if(variable.getNombre().equals(nombre)){
                    exist=true;
                }
            }
            if(exist==false){variables.add(var);}
            
            nombre = "";
            tipo = "";
            valor = "";
            estadoActual = 0;
        } else if (estado == 15 || estado == 16 || estado == 17 || estado == 31 || estado == 32 || estado == 33) {
            valor += lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 19) {
            estadoActual = 30;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    if (var.getTipo().equals("ENTERO")) {
                        estadoActual = 20;
                    } else if (var.getTipo().equals("TEXTO")) {
                        estadoActual = 21;
                    } else if (var.getTipo().equals("FLOTANTE")) {
                        estadoActual = 22;
                    }
                    nombreVariablePendiente = lexer.lexeme;
                }
            }
            if (estadoActual == 30) {
                errores.add("La variable " + lexer.lexeme + ", no existe o no se ha definido, linea: " + linea + ", columna: " + columna);
            }
        } else if (estado == 25 || estado == 29 || estado == 34) {
            for (Variables var : variables) {
                if (var.getNombre().equals(nombreVariablePendiente)) {
                    var.setValor(valor);
                    estadoActual = 0;
                    valor = "";
                    nombreVariablePendiente = "";
                }
            }
        }//DE AQUI HACIA ABAJO SOBRE OPERACIONES CON NUMEROS ENTEROS
        else if (estado == 61 || estado == 60 || estado == 62 || estado == 66) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    exist = true;
                    if (estado == 66 || estado == 62) {
                        tipo = var.getTipo();
                    }
                    if (var.getTipo().equals(tipo)) {

                        if (estado == 61 || estado == 62) {
                            valor = var.getValor();
                        } else if (estado == 60 || estado == 66) {
                            valor2 = var.getValor();
                        }

                    } else {
                        errores.add("La variable con nombre: " + lexer.lexeme + " No coicide con el mismo tipo al que le estas asignando, Linea: " + linea + ", Columna: " + columna);
                    }
                }
            }
            if (exist == false) {
                errores.add("La variable con nombre: " + lexer.lexeme + " No existe o no se ha creado aun, Linea: " + linea + ", Columna: " + columna);
            }
            estadoActual = estado;
        } else if (estado == 57 || estado == 63) {
            operador = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 58 || estado == 64) {
            valor2 = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 59) {
            try {
                int var1 = Integer.parseInt(valor);
                int var2 = Integer.parseInt(valor2);
                valor = "" + operar(operador, var1, var2);
                Variables var = new Variables();
                var.setNombre(nombre);
                var.setTipo(tipo);
                var.setValor(valor);
                variables.add(var);
                nombre = "";
                tipo = "";
                valor = "";
                valor2 = "";
                estadoActual = 0;
            } catch (NumberFormatException e) {
            }

        } else if (estado == 65) {
            try {
                int var1 = Integer.parseInt(valor);
                int var2 = Integer.parseInt(valor2);
                valor = "" + operar(operador, var1, var2);
                for (Variables var : variables) {
                    if (var.getNombre().equals(nombreVariablePendiente)) {
                        var.setValor(valor);
                        nombreVariablePendiente = "";
                    }
                }

                nombre = "";
                tipo = "";
                valor = "";
                valor2 = "";
                estadoActual = 0;
            } catch (NumberFormatException e) {
            }
        } else if (estado == 0) {
            //errores.add("Error sintactico, linea: " + linea + ", columna: " + columna);

        } //DE AQUI HACIA ABAJO SOBRE ESCRIBIR
        else if (estado == 41) {
            System.out.println(estado);
            System.out.println(Escritura);
            compilacion += Escritura + "\n";
            Escritura = "";
            estadoActual = 0;
        } else if (estado == 40 || estado == 54 || estado == 99/*estado99 es para el if*/) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    Escritura += var.getValor();
                    if (estado == 54) {
                        Escritura += "\n";
                    }
                    exist = true;
                }
                //if(estado==54){ Escritura += "\n";}
            }
            if (exist == false) {
                errores.add("Error semantico: La variable: " + lexer.lexeme + ", no existe, Linea: " + linea + ", Columna: " + columna);
            }
            estadoActual = estado;
        }//DE AQUI HACIA ABAJO SOBRE FOR ESCRITURA
        else if (estado == 44 || estado == 82 /*estdo 82 ya es para el if*/) {
            forVar1 = Integer.parseInt(lexer.lexeme);
            estadoActual = estado;
        }//guardando el valor 1
        else if (estado == 46 || estado == 85/*85 ya es para el if*/) {
            forVar2 = Integer.parseInt(lexer.lexeme);
            estadoActual = estado;
        }//guardando el valor 2
        else if (estado == 55) {//evaluando el for para escritura
            if (forVar1 >= forVar2) {
                errores.add("Error semantico: La variable: " + forVar1 + " es mayor o igual que la variable: " + forVar2 + ", no se puede correr el ciclo for");
            } else {
                for (int i = 0; i <= (forVar2 - forVar1); i++) {
                    compilacion += Escritura;
                }
                Escritura = "";
            }
            estadoActual = 56;
            estadoActual = 0;
        } else if (estado == 56) {
            estadoActual = 0;
        } else if (estado == 67 || estado == 68 || estado == 83 || estado == 86/*83 y 86 ya son del if*/) {
            boolean existe = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    existe = true;
                    if (var.getTipo().equalsIgnoreCase("ENTERO")) {
                        if (estado == 67 || estado == 83) {
                            forVar1 = Integer.parseInt(var.getValor());
                        } else if (estado == 68 || estado == 86) {
                            forVar2 = Integer.parseInt(var.getValor());
                        }
                    } else {
                        errores.add("La variable: " + lexer.lexeme + " no es de tipo entero, por lo que no funciona el ciclo for");
                    }
                }
            }
            if (existe == false) {
                errores.add("La variable: " + lexer.lexeme + " no existe o no se ha definido anteriormente");
            }
            estadoActual = estado;
        }// DE AQUI HACIA ABAJO ES SOBRE FOR ASIGNACION
        else if (estado == 69 || estado == 101) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    exist = true;
                    nombreVariablePendiente = var.getNombre();
                    tipo = var.getTipo();
                }
            }
            if (exist == false) {
                errores.add("La variable: " + lexer.lexeme + ", No existe o no se ha declarado,  Linea: " + linea + ", Columna: " + columna);
            }
            estadoActual = estado;
        } else if (estado == 71 || estado == 76 || estado == 103 || estado == 108) {
            if (tipo.equals("ENTERO")) {
                if (estado == 71 || estado == 103) {
                    valor = lexer.lexeme;
                } else if (estado == 76 || estado == 108) {
                    valor2 = lexer.lexeme;
                }
            } else {
                errores.add("La variable " + lexer.lexeme + ", no es del mismo tipo a la que se esta asignando");
            }

            estadoActual = estado;
        } else if (estado == 74 || estado == 77 || estado == 104 || estado == 109) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    exist = true;
                    if (var.getTipo().equals(tipo)) {
                        if (estado == 74 || estado == 104) {
                            valor = var.getNombre();
                        } else if (estado == 77 || estado == 109) {
                            valor2 = var.getNombre();
                        }
                    } else {
                        errores.add("La variable " + lexer.lexeme + ", no es del mismo tipo a la que se esta asignando");
                    }
                }
            }
            if (exist == false) {
                errores.add("La variable " + lexer.lexeme + ", no existe o no se ha declarado anteriormente");
            }
            estadoActual = estado;
        } else if (estado == 75 || estado == 113) {
            operador = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 73 || estado == 105) {
            for (Variables var : variables) {
                if (var.getNombre().equals(nombreVariablePendiente)) {
                    var.setValor(valor);
                    valor = "";
                    nombreVariablePendiente = "";
                }
            }
            estadoActual = 0;
        } else if (estado == 79) {
            for (int i = 0; i <= (forVar2 - forVar1); i++) {
                int var1 = 0;
                int var2 = 0;
                try {
                    var1 = Integer.parseInt(valor);
                } catch (Exception e) {
                    for (Variables var : variables) {
                        if (var.getNombre().equals(valor)) {
                            var1 = Integer.parseInt(var.getValor());
                        }
                    }
                }
                try {
                    var2 = Integer.parseInt(valor2);
                } catch (Exception e) {
                    for (Variables var : variables) {
                        if (var.getNombre().equals(valor2)) {
                            var2 = Integer.parseInt(var.getValor());
                        }
                    }
                }

                for (Variables variable : variables) {
                    if (variable.getNombre().equals(nombreVariablePendiente)) {
                        variable.setValor("" + operar(operador, var1, var2));
                    }
                }

            }
            System.out.println("Cambiando de: " + forVar1 + ", hasta: " + forVar2);
            operador = "";
            nombreVariablePendiente = "";
            valor = "";
            valor2 = "";
            estadoActual = 0;
        }//DE AQUI HACIA ABAJO EMPIEZA LAS DE IF ELSE
        else if (estado == 84) {
            comparacion = lexer.lexeme;
            estadoActual = estado;
        } else if (estado == 87) {
            if (comparar(comparacion, forVar1, forVar2)) {
                estadoActual = 89;
            } else {
                estadoActual = 88;
            }
        } else if (estado == 97) {
            compilacion += Escritura + "\n";
            Escritura = "";
            estadoActual = estado;
        } else if (estado == 98 || estado == 90) {
            estadoActual = 0;
        }//DE AQUI HACIA ABAJO SOBRE ASIGNACIONESDENTRO DEL IF ELSE
        else if (estado == 110) {
            int var1 = 0;
            int var2 = 0;
            try {
                var1 = Integer.parseInt(valor);
            } catch (Exception e) {
                for (Variables var : variables) {
                    if (var.getNombre().equals(valor)) {
                        var1 = Integer.parseInt(var.getValor());
                    }
                }
            }
            try {
                var2 = Integer.parseInt(valor2);
            } catch (Exception e) {
                for (Variables var : variables) {
                    if (var.getNombre().equals(valor2)) {
                        var2 = Integer.parseInt(var.getValor());
                    }
                }
            }

            for (Variables variable : variables) {
                if (variable.getNombre().equals(nombreVariablePendiente)) {
                    variable.setValor("" + operar(operador, var1, var2));
                }
            }
            estadoActual = estado;
        } else if (estado == 111 || estado == 106) {
            estadoActual = 0;
        } //DE AQUI HACIA ABAJO TODO LO QUE TIENE QUE VER CON LEER
        else if (estado == 116) {
            boolean exist = false;
            for (Variables var : variables) {
                if (var.getNombre().equals(lexer.lexeme)) {
                    exist = true;
                    nombreVariablePendiente = var.getNombre();
                    variablesLeer.add(nombreVariablePendiente);
                    System.out.println("agregando a lista de leer la variable: " + nombreVariablePendiente);
                }
            }
            if (exist == false) {
                errores.add("La variable " + lexer.lexeme + ", no existe o no se ha declarado anteriormente");
            }
            estadoActual = estado;
        } else if (estado == 118) {

            if (ValorVariableLeer.equalsIgnoreCase("null")) {
                System.out.println("Vamos en el estado 118");
                //System.out.println(variablesLeer.get(0));
                console.setText(console.getText() + "Ingresa el valor para la variable: " + nombreVariablePendiente + "\n");
                valorVariable.setEditable(true);
                continuarButton.setEnabled(true);
            } else {
                compilacion += "Leyendo el valor de la variable: " + nombreVariablePendiente + "\n";
            }

            estadoActual = 0;

        }//DE AQUI HACIA ABAJO EMPIEZA LO DEL CICLO WHILE 
        else if(estado==156||estado==121){
            var1ForWhile=lexer.lexeme;
            estadoActual=estado;
        }else if(estado==124||estado==123){
            var2ForWhile=lexer.lexeme;
            estadoActual=estado;
            
        }else if(estado==122){
            comparacion=lexer.lexeme;
            estadoActual=estado;
        }//DE AQUI HACIA ABAJO EMPIEZA LO DE LA SENTENCIA SWITCH
        else if(estado==146){
            boolean exist=false;
            for (Variables variable : variables) {
                if(variable.getNombre().equals(lexer.lexeme)){
                    exist=true;
                    variableSwitch=variable;
                }
            }
            if(exist==false){errores.add("La variable: " + lexer.lexeme + ", No existe, Linea: " + linea + ", Columna: " + columna);}
            estadoActual=estado;
        }else if(estado==149){
            if(variableSwitch.getTipo().equals("ENTERO")){
                textoComparando=lexer.lexeme;
            }else{errores.add("La variable: " + variableSwitch.getNombre() + " no es de tipo ENTERO, Linea: " +linea + ", Columna: " + columna);}
            estadoActual=estado;
        }else if(estado==151){
            if(!variableSwitch.getTipo().equals("TEXTO")){
                errores.add("La variable: " + variableSwitch.getNombre() + " no es de tipo ENTERO, Linea: " +linea + ", Columna: " + columna);
            }
            estadoActual=estado;
        }
        else {
            estadoActual = estado;
        }

    }

    private boolean comparar(String comparador, int var1, int var2) {
        boolean si = false;
        System.out.println("COmparando las variables: var1=" + var1 + ", var2: " + var2 + ", con el comparador: " + comparador);
        switch (comparador) {
            case "==":
                si = (var1 == var2);
                break;
            case "<":
                si = var1 < var2;
                break;
            case ">":
                si = var1 > var2;
                break;
            case "<=":
                si = var1 <= var2;
                break;
            case ">=":
                si = var1 >= var2;
                break;
        }
        return si;
    }

    private int operar(String operador, int var1, int var2) {
        int operacion = 0;
        switch (operador) {
            case "+":
                operacion = (var1 + var2);
                break;
            case "-":
                operacion = (var1 - var2);
                break;
            case "*":
                operacion = (var1 * var2);
                break;
            case "/":
                operacion = (var1 / var2);
                break;
        }
        return operacion;
    }

    private void imprimirVariables() {
        for (int i = 0; i < variables.size(); i++) {
            System.out.println("Nombre: " + variables.get(i).getNombre());
            System.out.println("Tipo: " + variables.get(i).getTipo());
            System.out.println("Valor: " + variables.get(i).getValor());
            System.out.println();

        }
    }

    private void imprimirErrores() {
        for (String texto : errores) {
            System.out.println(texto);
            System.out.println();
        }
    }

    private void AnalizadorSintactico() {
        String ST = editorCode.getText();
        Sintax s = new Sintax(new Lexico.LexerCup(new StringReader(ST)));
        try {
            s.parse();
            console.setForeground(Color.green);
            console.setText("Analisis sintactico realizado correctamente");
        } catch (Exception ex) {
            Symbol sym = s.getS();
            console.setText("");
            errores = new ArrayList<>();
            //console.setText("Error de sintaxis. Linea: " + (sym.right+1)+ " Columna: " + (sym.left+1) + ", Texto: \"" + sym.value + "\"");
            errores.add("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            for (String error : errores) {
                console.setForeground(Color.red);
                console.setText(console.getText() + error + "\n");
            }
        }
    }

    private void run() {
        analizarLexico();
        if (errores.size() == 0) {
            AnalizadorSintactico();
            if (errores.size() == 0) {
                if (variablesLeer.size() == 0) {
                    ejecutor();
                } else {

                }
            }
        }
        if (errores.size() == 0) {
            if (variablesLeer.size() == 0) {
                System.out.println("entrando aca");
                //ejecutor();
            } else {
                console.setText("");
                for (String var : variablesLeer) {
                    System.out.println(var);
                    valorVariable.setEditable(true);
                    continuarButton.setEnabled(true);
                    console.setText(console.getText() + "Ingresa el valor de la variable: " + var + "\n");
                }
            }

        } else {
            for (String var : errores) {
                System.out.println(var);
                console.setText(console.getText() + var + "\n");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analizarLexico;
    private javax.swing.JButton analizarSintactico;
    private javax.swing.JTextArea console;
    private javax.swing.JButton continuarButton;
    private javax.swing.JTextArea editorCode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarCode;
    private javax.swing.JButton limpiarConsole;
    private javax.swing.JButton runCode;
    private javax.swing.JTextField valorVariable;
    // End of variables declaration//GEN-END:variables
}
